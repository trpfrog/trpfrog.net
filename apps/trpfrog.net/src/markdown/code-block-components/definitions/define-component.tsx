import yaml from 'js-yaml'
import { z } from 'zod'

import { env } from '@/env/server'

import { ErrorFallback } from '@/components/atoms/ErrorFallback'

import { CustomCodeBlockComponent } from '../types'

const UserFunctionSchema = z.function().args(z.unknown()).returns(z.string())
const definedComponents: Record<string, z.output<typeof UserFunctionSchema>> = {}

/**
 * Component parts that define a custom component.
 * Custom component is defined by a function that takes `props` as an argument.
 *
 * @example
 * ````md
 * ```define-component
 * my-component-name
 *
 * console.log(props.consoleMsg)
 * return `<p>${props.componentText}</p>`
 * ```
 * ````
 */
export const defineComponentCCBC: CustomCodeBlockComponent = {
  Component: ({ markdown, context }) => {
    const [name, ...templateLines] = markdown.split('\n')
    try {
      definedComponents[`${context.blog?.slug}/${name}`] = UserFunctionSchema.parse(
        Function('props', templateLines.join('\n')),
      )
    } catch (e) {
      console.error(e)
      definedComponents[`${context.blog?.slug}/${name}`] = () => {
        throw e
      }
    }
    return <></>
  },
}

/**
 * Component parts that use a defined component.
 * The defined component can be used in the article.
 *
 * `use` is the name of the defined component.
 * The rest of the properties are passed to the defined component as `props`.
 * `props` is generated by parsing YAML.
 *
 * @example
 * ````md
 * ```use-defined-component
 * use: my-component-name
 * consoleMsg: Hello, world!
 * componentText: This is a custom component.
 * ```
 * ````
 */
export const useDefinedComponentCCBC: CustomCodeBlockComponent = {
  Component: async ({ markdown, context, Render }) => {
    const { use: name, ...props } = yaml.load(markdown) as {
      use?: string
    } & Record<string, string>

    const template = definedComponents[`${context.blog?.slug}/${name}`]
    if (!template) {
      if (env.NODE_ENV === 'development') {
        return <ErrorFallback title={`Component ${name} not found`} />
      } else {
        return <></>
      }
    }
    try {
      const rendered = template(props)
      return <Render markdown={rendered} />
    } catch (e) {
      console.error(e)
      if (env.NODE_ENV === 'development') {
        return <ErrorFallback title={`Something went wrong in "${name}"`} />
      } else {
        return <></>
      }
    }
  },
}
